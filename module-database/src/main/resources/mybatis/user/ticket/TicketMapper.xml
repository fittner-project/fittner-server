<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.fittnerserver.mapper.user.ticket.TicketMapper">

    <select id="selectTicketByForOption" resultType="TicketDto">
        /* TicketMapper.selectTicketByForOption */
        select a.ticket_id
             , a.ticket_start_date
             , a.ticket_end_date
             , a.ticket_code
             , '' ticket_code_name
             , a.ticket_suspend_start_date
             , a.ticket_suspend_end_date
             , a.ticket_use_cnt
             , a.original_ticket_id
             , a.ticket_relay_yn
             , b.trainer_product_id
             , b.trainer_id
             , b.trainer_product_name as ticket_name
             , b.trainer_product_price as ticket_price
             , b.trainer_product_count as ticket_total_cnt
             , c.member_id
             , c.member_name
             , c.member_phone
             , c.member_phone_end
             , c.member_birth
             , c.member_memo
             , c.member_gender
             , c.member_address
             , c.member_join_path
             , d.center_id
             , d.center_name
             , d.center_tel
             , d.center_address
             , e.trainer_id
             , e.trainer_name
             , e.trainer_email
             , e.trainer_phone
             , LEFT(REGEXP_REPLACE(a.created_date, '[^0-9]', ''), 8) as created_date
             , row_number() over (order by a.ticket_start_date desc, a.created_date desc) AS row_num
          from ticket a
     left join trainer_product b
            on a.trainer_product_id = b.trainer_product_id
     left join member c
            on a.member_id = c.member_id
     left join center d
            on b.center_id = d.center_id
     left join trainer e
            on a.trainer_id = e.trainer_id
         where a.ticket_delete_yn = 'N'
         <if test='ticketId != null and ticketId != ""'>
             and a.ticket_id = #{ticketId}
         </if>
         <if test='trainerId != null and trainerId != ""'>
             and a.trainer_id = #{trainerId}
         </if>
         <if test='ticketCode != null and ticketCode != ""'>
             and a.ticket_code = #{ticketCode}
         </if>
    </select>

    <select id="selectTicketByTicketId" resultType="TicketDto">
        /* TicketMapper.selectTicketByTicketId */
        select a.ticket_id
             , a.ticket_start_date
             , a.ticket_end_date
             , a.ticket_code
             , a.ticket_suspend_start_date
             , a.ticket_suspend_end_date
             , a.ticket_use_cnt
             , a.original_ticket_id
             , a.ticket_relay_yn
             , b.trainer_product_id
             , b.trainer_id
             , b.trainer_product_name as ticket_name
             , b.trainer_product_price as ticket_price
             , b.trainer_product_count as ticket_total_cnt
             , c.member_id
             , c.member_name
             , c.member_phone
             , c.member_phone_end
             , c.member_birth
             , c.member_memo
             , d.center_id
             , d.center_name
             , d.center_tel
             , d.center_address
             , e.trainer_id
             , e.trainer_name
             , e.trainer_email
             , e.trainer_phone
             , LEFT(REGEXP_REPLACE(a.created_date, '[^0-9]', ''), 8) as created_date
          from ticket a
     left join trainer_product b
            on a.trainer_product_id = b.trainer_product_id
     left join member c
            on a.member_id = c.member_id
     left join center d
            on b.center_id = d.center_id
     left join trainer e
            on a.trainer_id = e.trainer_id
         where a.ticket_delete_yn = 'N'
        <choose>
            <when test="gubn == 'ORIGINAL'">
                and original_ticket_id = #{ticketId}
            </when>
            <otherwise>
                and ticket_id = #{ticketId}
            </otherwise>
        </choose>
    </select>

    <select id="selectRefund" resultType="Refund">
        /* TicketMapper.selectRefund */
        select refund_cnt
             , refund_price
             , refund_date_time
          from refund
         where ticket_id = #{ticketId}
    </select>

    <insert id="insertTicket">
        /* TicketMapper.insertTicket */
        insert into ticket(
                    created_by
                  , created_date
                  , member_id
                  , ticket_end_date
                  , ticket_id
                  , ticket_start_date
                  , trainer_id
                  , trainer_product_id
                  , ticket_code
                  , original_ticket_id
                  , ticket_use_cnt
                  , ticket_relay_yn
          ) values (
                    #{trainerId}
                  , CURRENT_TIMESTAMP
                  , #{memberId}
                  , #{ticketEndDate}
                  , #{ticketId}
                  , #{ticketStartDate}
                  , #{trainerId}
                  , #{trainerProductId}
                  , #{ticketCode}
                  , #{originalTicketId}
                  , #{ticketUseCnt}
                  , #{ticketRelayYn}
          )
    </insert>

    <update id="updateTicketForTicketCode">
        /* TicketMapper.updateTicketForTicketCode */
        update ticket
           set ticket_code = #{ticketCode}
             , modified_by = #{trainerId}
             , modified_date = CURRENT_TIMESTAMP
         where ticket_id = #{ticketId}
    </update>

    <insert id="insertMember">
        /* TicketMapper.insertMember */
        insert into member(
                    member_phone_end
                  , member_birth
                  , member_name
                  , member_address
                  , member_phone
                  , center_id
                  , created_by
                  , created_date
                  , member_join_path
                  , member_memo
                  , trainer_id
                  , member_gender
                  , member_id
           ) values (
                    #{memberPhoneEnd}
                  , #{AssignToNewMemberReqDto.memberBirth}
                  , #{AssignToNewMemberReqDto.memberName}
                  , #{AssignToNewMemberReqDto.memberAddress}
                  , #{AssignToNewMemberReqDto.memberPhone}
                  , #{AssignToNewMemberReqDto.centerId}
                  , #{trainerId}
                  , CURRENT_TIMESTAMP
                  , #{AssignToNewMemberReqDto.memberJoinPath}
                  , #{AssignToNewMemberReqDto.memberMemo}
                  , #{AssignToNewMemberReqDto.trainerId}
                  , #{AssignToNewMemberReqDto.memberGender}
                  , #{memberId}
          )
    </insert>

    <insert id="insertTrainerProduct">
        /* TicketMapper.insertTrainerProduct */
        insert into trainer_product(
                    trainer_product_count
                  , trainer_product_price
                  , trainer_product_name
                  , center_id
                  , created_by
                  , created_date
                  , member_id
                  , trainer_id
                  , trainer_product_id
          ) values (
                    #{trainerProductCount}
                  , #{trainerProductPrice}
                  , #{trainerProductName}
                  , #{centerId}
                  , #{trainerId}
                  , CURRENT_TIMESTAMP
                  , #{memberId}
                  , #{trainerId}
                  , #{trainerProductId}
          )
    </insert>

    <update id="updateTicketForUseCnt">
        /* TicketMapper.updateTicketForUseCnt */
        update ticket
           set ticket_use_cnt = (ticket_use_cnt+1)
         where ticket_id = #{ticketId}
    </update>

    <insert id="insertRefund">
        /* TicketMapper.insertRefund */
        insert into refund(
                    refund_cnt
                  , refund_price
                  , refund_date_time
                  , center_id
                  , created_by
                  , created_date
                  , member_id
                  , refund_id
                  , ticket_id
                  , trainer_id
          ) values (
                    #{refundCnt}
                  , #{refundPrice}
                  , #{refundDateTime}
                  , #{centerId}
                  , #{trainerId}
                  , current_timestamp
                  , #{memberId}
                  , #{refundId}
                  , #{ticketId}
                  , #{trainerId}
          )
    </insert>

    <select id="selectTicketByMemberIdForNowTicket" resultType="TicketDto">
        /* TicketMapper.selectTicketByMemberIdForNowTicket */
        select a.ticket_id
          from ticket a
         where a.ticket_delete_yn = 'N'
           and a.member_id = #{memberId}
           and a.ticket_start_date <![CDATA[<=]]> #{reservationStartDate}
           and a.ticket_end_date <![CDATA[>=]]> #{reservationStartDate}
    </select>
</mapper>








